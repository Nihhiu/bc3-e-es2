// <auto-generated />
using System;
using ComparacaoPrecos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComparacaoPrecos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250615190735_AddLogs")]
    partial class AddLogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Categoria", b =>
                {
                    b.Property<string>("CategoriaID")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.HasKey("CategoriaID");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            CategoriaID = "Cosméticos",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Bebidas",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Laticínios",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Carnes",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Peixes",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Produtos de Limpeza",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Higiene Pessoal",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Papelaria",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Brinquedos",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Automóveis e Acessórios",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Móveis",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Decoração",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Esportes e Fitness",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Ferramentas",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Iluminação",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Pet Shop",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Instrumentos Musicais",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Relógios e Joias",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Material de Construção",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Eletrodomésticos",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Saúde e Bem-Estar",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Artesanato",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Games",
                            Deleted = false
                        },
                        new
                        {
                            CategoriaID = "Produtos Naturais",
                            Deleted = false
                        });
                });

            modelBuilder.Entity("Logs", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogID"));

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogID");

                    b.HasIndex("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Loja", b =>
                {
                    b.Property<int>("LojaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LojaID"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LojaID");

                    b.ToTable("Loja");

                    b.HasData(
                        new
                        {
                            LojaID = 1,
                            Deleted = false,
                            Latitude = 41.702711399999998,
                            Longitude = -8.8167361,
                            Nome = "Pingo Doce"
                        },
                        new
                        {
                            LojaID = 2,
                            Deleted = false,
                            Latitude = 41.706357300000001,
                            Longitude = -8.8200368999999998,
                            Nome = "Lidl"
                        },
                        new
                        {
                            LojaID = 3,
                            Deleted = false,
                            Latitude = 41.704391700000002,
                            Longitude = -8.8152299000000003,
                            Nome = "Continente"
                        },
                        new
                        {
                            LojaID = 4,
                            Deleted = false,
                            Latitude = 41.707097300000001,
                            Longitude = -8.8255710999999994,
                            Nome = "Mercadona"
                        },
                        new
                        {
                            LojaID = 5,
                            Deleted = false,
                            Latitude = 41.694973699999998,
                            Longitude = -8.8331628999999996,
                            Nome = "Worten"
                        },
                        new
                        {
                            LojaID = 6,
                            Deleted = false,
                            Latitude = 41.703153200000003,
                            Longitude = -8.8243452999999992,
                            Nome = "Dimacer"
                        },
                        new
                        {
                            LojaID = 7,
                            Deleted = false,
                            Latitude = 41.695014,
                            Longitude = -8.8439396000000006,
                            Nome = "ALDI"
                        },
                        new
                        {
                            LojaID = 8,
                            Deleted = false,
                            Latitude = 41.698815799999998,
                            Longitude = -8.8464872000000003,
                            Nome = "Toyota-Macedo & Macedo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.Property<int>("ProdutoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProdutoID"));

                    b.Property<string>("CategoriaID")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ProdutoID");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Produto_Loja", b =>
                {
                    b.Property<int>("ProdutoID")
                        .HasColumnType("integer");

                    b.Property<int>("LojaID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("credibilidade")
                        .HasColumnType("integer");

                    b.Property<double>("preco")
                        .HasColumnType("double precision");

                    b.HasKey("ProdutoID", "LojaID");

                    b.HasIndex("Id");

                    b.HasIndex("LojaID");

                    b.ToTable("Produto_Loja");
                });

            modelBuilder.Entity("Logs", b =>
                {
                    b.HasOne("ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.HasOne("Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Produto_Loja", b =>
                {
                    b.HasOne("ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loja", "Loja")
                        .WithMany()
                        .HasForeignKey("LojaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Loja");

                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
